@page "/inventory"

@inject Services.ProductControllerProxy productControllerProxy
@inject Services.ProductInstanceControllerProxy productInstanceControllerProxy
@inject NotificationService notificationService
<h3>Inventory</h3>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenGrid Data=@items AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="InventoryItem" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="InventoryItem" Property="ProductName" />
            <RadzenGridColumn TItem="InventoryItem" Property="ExpirationDate" />
            <RadzenGridColumn TItem="InventoryItem" Property="Amount" />
            <RadzenGridColumn TItem="InventoryItem" Property="AmountUnit" />
            <RadzenGridColumn TItem="InventoryItem" Property="InventoryDate" />
            <RadzenGridColumn TItem="InventoryItem" Property="ShelfName" />
            <RadzenGridColumn TItem="InventoryItem" Property="RoomName" />
            <RadzenGridColumn TItem="InventoryItem" Property="CategoryName" />
            <RadzenGridColumn TItem="InventoryItem" Property="ProductInstanceId" Title="Consumed?">
                <Template Context="data">
                    <RadzenButton Text="Consumed" Click="@(args => ConsumeAsync(data.ProductInstanceId, data.ProductName))" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}


@code {
    private IEnumerable<InventoryItem> items = null;

    protected override Task OnInitializedAsync()
    {
        return LoadInventory();
    }

    private async Task LoadInventory()
    {
        var response = await productControllerProxy.GetInventory();
        if (response.IsSuccess)
        {
            items = response.Data.Items;
        }
        else
        {
            throw new Exception(response.Error.Message + "-" + response.Error.ErrorCode);
        }
    }

    private async Task ConsumeAsync(long id, string productName)
    {
        var result = await productInstanceControllerProxy.Consume(id);
        if (result.IsSuccess)
        {
            notificationService.Notify(NotificationSeverity.Success, $"Product {productName} Consumed");
            await LoadInventory();
        }
        else
        {
            notificationService.Notify(NotificationSeverity.Error, $"Product {productName} cannot be consumed",result.Error.ErrorCode);
        }
    }
}
